{"remainingRequest":"/home/amos/Bureau/VSDR_site/node_modules/babel-loader/lib/index.js!/home/amos/Bureau/VSDR_site/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/amos/Bureau/VSDR_site/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/amos/Bureau/VSDR_site/src/pages/Dashboard/Neige/Snow.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/amos/Bureau/VSDR_site/src/pages/Dashboard/Neige/Snow.vue","mtime":1622618455084},{"path":"/home/amos/Bureau/VSDR_site/.babelrc","mtime":1617204143000},{"path":"/home/amos/Bureau/VSDR_site/node_modules/cache-loader/dist/cjs.js","mtime":1622616452493},{"path":"/home/amos/Bureau/VSDR_site/node_modules/babel-loader/lib/index.js","mtime":1622616452469},{"path":"/home/amos/Bureau/VSDR_site/node_modules/cache-loader/dist/cjs.js","mtime":1622616452493},{"path":"/home/amos/Bureau/VSDR_site/node_modules/vue-loader/lib/index.js","mtime":1622616466449}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IE5Qcm9ncmVzcyBmcm9tICJucHJvZ3Jlc3MiOwppbXBvcnQgSGlnaGNoYXJ0cyBmcm9tICJoaWdoY2hhcnRzIjsKaW1wb3J0IENoYXJ0TW9kdWxlTW9yZSBmcm9tICdoaWdoY2hhcnRzL2hpZ2hjaGFydHMtbW9yZSc7CmltcG9ydCBIQ1NvbGlkR2F1Z2UgZnJvbSAnaGlnaGNoYXJ0cy9tb2R1bGVzL3NvbGlkLWdhdWdlJzsKaW1wb3J0IGV4cG9ydGluZ0luaXQgZnJvbSAiaGlnaGNoYXJ0cy9tb2R1bGVzL2V4cG9ydGluZyI7CmltcG9ydCBheGlvcyBmcm9tICJheGlvcyI7CmV4cG9ydGluZ0luaXQoSGlnaGNoYXJ0cyk7CkNoYXJ0TW9kdWxlTW9yZShIaWdoY2hhcnRzKTsKSENTb2xpZEdhdWdlKEhpZ2hjaGFydHMpOwp2YXIgZmllbGRfc25vdyA9ICdwYXlsb2FkX2ZpZWxkc19XYXRlckhlaWdodE1tJzsKdmFyIGRlY2ltYWwgPSAyOwpleHBvcnQgZGVmYXVsdCB7CiAgbmFtZTogIlNub3ciLAogIGNvbXBvbmVudDoge30sCiAgZGF0YTogZnVuY3Rpb24gZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIHNlbnNvcnM6IFtdLAogICAgICBsb2NhdGlvbk5hbWU6IHRoaXMuJHJvdXRlLm5hbWUsCiAgICAgIHNlcmllc19jaGFydDogW10sCiAgICAgIGRlbHRhX3Nub3c6ICIiLAogICAgICBjdW11bF9zbm93OiAiIiwKICAgICAgc25vd09mZnNldDogMAogICAgfTsKICB9LAogIGNyZWF0ZWQ6IGZ1bmN0aW9uIGNyZWF0ZWQoKSB7fSwKICB3YXRjaDogewogICAgJyRyb3V0ZS5yb3V0ZSc6IHsKICAgICAgaGFuZGxlcjogZnVuY3Rpb24gaGFuZGxlcigpIHsKICAgICAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgICAgICB0aGlzLmxvY2F0aW9uTmFtZSA9IHRoaXMuJHJvdXRlLm5hbWU7CiAgICAgICAgdGhpcy4kZ2xvYmFsTG9hZERhdGEoJ2hlaScsIHRoaXMubG9jYXRpb25OYW1lKTsKICAgICAgICB0aGlzLnNlbnNvcnMgPSB0aGlzLiRnbG9iYWxTZW5zb3JzOwogICAgICAgIHZhciBwcm9qZWN0ID0gbG9jYXRpb24uaG9zdG5hbWUuc3BsaXQoJy4nKVswXTsKICAgICAgICBheGlvcy5nZXQoJ2h0dHBzOi8vc25vdy1zZXJ2ZXIud2F0ZXJtb24uY2g6NDQzL3Nub3dPZmZzZXQnKS50aGVuKGZ1bmN0aW9uIChyZXMpIHsKICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmVzLmRhdGEubGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgaWYgKHJlcy5kYXRhW2ldLnByb2plY3QgPT09IHByb2plY3QgJiYgcmVzLmRhdGFbaV0ubG9jYXRpb24gPT0gX3RoaXMubG9jYXRpb25OYW1lKSB7CiAgICAgICAgICAgICAgX3RoaXMuc25vd09mZnNldCA9IHJlcy5kYXRhW2ldLm9mZnNldDsKCiAgICAgICAgICAgICAgX3RoaXMuJGxvYWRTZXJpZSgnaGVpJywgX3RoaXMubG9jYXRpb25OYW1lLCBmaWVsZF9zbm93LCAnSGF1dGV1ciBkZSBuZWlnZScsICcxMG0nLCAnN2QnLCBfdGhpcy5zbm93T2Zmc2V0KS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkgewogICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLnNlcmllc19jaGFydCA9IHJlc3BvbnNlOwogICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICBfdGhpcy5sb2FkQ3VtdWxhdGVTbm93RGF0YSgnaGVpJywgX3RoaXMubG9jYXRpb25OYW1lLCBmaWVsZF9zbm93LCBfdGhpcy5zbm93T2Zmc2V0KTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnJvcikgewogICAgICAgICAgY29uc29sZS5sb2coZXJyb3IpOwogICAgICAgIH0pOwogICAgICB9LAogICAgICBkZWVwOiB0cnVlLAogICAgICBpbW1lZGlhdGU6IHRydWUKICAgIH0KICB9LAogIG1ldGhvZHM6IHsKICAgIGxvYWRDdW11bGF0ZVNub3dEYXRhOiBmdW5jdGlvbiBsb2FkQ3VtdWxhdGVTbm93RGF0YShzZW5zb3JUeXBlLCBsb2NhdGlvbiwgZmllbGRfc25vdywgb2Zmc2V0KSB7CiAgICAgIHZhciBfdGhpczIgPSB0aGlzOwoKICAgICAgdmFyIHF1ZXJ5ID0gJ1NFTEVDVCAnICsgZmllbGRfc25vdyArICcgRlJPTSBtcXR0X2NvbnN1bWVyIHdoZXJlICcgKyAnIicgKyAndG9waWMnICsgJyInICsgJyA9JyArICInIiArICdoZXNfYXllbnQtc25vdy9kZXZpY2VzLycgKyBzZW5zb3JUeXBlICsgJy0nICsgbG9jYXRpb24gKyAnL3VwJyArICInIiArICdBTkQgdGltZT5ub3coKS0zNjVkJzsKICAgICAgdmFyIGN1bXVsU25vd1F1ZXJ5ID0gMDsKICAgICAgUHJvbWlzZS5hbGwoW3RoaXMuJGluZmx1eENsaWVudC5xdWVyeShxdWVyeSldKS50aGVuKGZ1bmN0aW9uIChwYXJzZWRSZXMpIHsKICAgICAgICBwYXJzZWRSZXMubWFwKGZ1bmN0aW9uIChhcnIpIHsKICAgICAgICAgIGN1bXVsU25vd1F1ZXJ5ID0gYXJyWzBdW2ZpZWxkX3Nub3ddIC0gb2Zmc2V0OwoKICAgICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJyLmxlbmd0aCAtIDE7IGkrKykgewogICAgICAgICAgICBpZiAoYXJyW2ldW2ZpZWxkX3Nub3ddIDw9IGFycltpIC0gMV1bZmllbGRfc25vd10pIHsKICAgICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICBjdW11bFNub3dRdWVyeSA9IGN1bXVsU25vd1F1ZXJ5ICsgKGFycltpXVtmaWVsZF9zbm93XSAtIGFycltpIC0gMV1bZmllbGRfc25vd10pOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgICAgX3RoaXMyLmN1bXVsX3Nub3cgPSBjdW11bFNub3dRdWVyeTsKICAgICAgICBOUHJvZ3Jlc3MuZG9uZSgpOwogICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHsKICAgICAgICByZXR1cm4gY29uc29sZS5sb2coZXJyb3IpOwogICAgICB9KTsKICAgIH0KICB9Cn07"},{"version":3,"sources":["Snow.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div>\n   <h1>Snow page</h1>\n  </div>\n</template>\n\n<script>\n  //CHART\n  import NProgress from \"nprogress\";\n  import Highcharts from \"highcharts\";\n  import ChartModuleMore from 'highcharts/highcharts-more';\n  import HCSolidGauge from 'highcharts/modules/solid-gauge'\n  import exportingInit from \"highcharts/modules/exporting\";\n  import axios from \"axios\";\n\n  exportingInit(Highcharts);\n  ChartModuleMore(Highcharts);\n  HCSolidGauge(Highcharts);\n\n  const field_snow = 'payload_fields_WaterHeightMm'\n  let decimal = 2;\n  export default {\n      name: \"Snow\",\n      component: {},\n\n      data() {\n        return {\n          sensors: [],                          //contain the sensors values\n          locationName: this.$route.name,       //route to know witch information to load\n          series_chart: [],\n          delta_snow:\"\",                        //delta between 1hour ago and now\n          cumul_snow:\"\",                        //snow cumulate since 365 days\n          snowOffset : 0\n        }\n      },\n    created() {\n //     console.log(this.sensors)\n\n    },\n\n    watch: {\n        '$route.route': {                       // watch if route has changed (this is how page changes are detected)\n          handler: function () {\n            // If route changed, reload data\n            this.locationName = this.$route.name\n            this.$globalLoadData('hei',this.locationName);\n            this.sensors= this.$globalSensors\n\n            var project  = location.hostname.split('.')[0]\n            //get the offset from json file on server\n            axios.get('https://snow-server.watermon.ch:443/snowOffset')\n              .then(res => {\n                for(var i = 0 ; i<res.data.length; i++){\n                  if(res.data[i].project === project && res.data[i].location== this.locationName){\n                    this.snowOffset = res.data[i].offset\n                    this.$loadSerie('hei', this.locationName, field_snow, 'Hauteur de neige', '10m', '7d', this.snowOffset)\n                      .then(\n                        response => this.series_chart = response\n                      )\n                    this.loadCumulateSnowData('hei',this.locationName, field_snow, this.snowOffset)\n                  }\n                }\n              })\n              .catch(error => {\n                console.log(error)\n                // Manage errors if found any\n              })\n          },\n          deep: true,\n          immediate: true\n        },\n\n      },\n\n      methods:{\n        /**\n         * load cumulate snow data since 365days\n         * @returns {*}\n         */\n        loadCumulateSnowData: function(sensorType, location ,field_snow, offset) {\n          /*create the query*/\n          let query = 'SELECT ' + field_snow + ' FROM mqtt_consumer where '+\n            '\"'+ 'topic' +'\"'+' =' +\"'\"+ 'hes_ayent-snow/devices/' +\n            sensorType + '-' + location  +'/up' +\"'\"+ 'AND time>now()-365d'\n\n          let cumulSnowQuery=0;\n          Promise.all([\n            this.$influxClient.query(query), // WHERE time>now()-365d\n          ]).then(parsedRes => {\n            parsedRes.map( arr => {\n              cumulSnowQuery = arr[0][field_snow]-offset;\n              /*\n              this loop show if the value at position i+i is bigger than the previous, if yes, add the difference\n              to cumulsnow\n               */\n              for(var i = 1; i<arr.length-1;i++){\n                if(arr[i][field_snow]<= arr[i-1][field_snow]){\n                  continue;\n                }else{\n                  cumulSnowQuery = cumulSnowQuery + (arr[i][field_snow] - arr[i-1][field_snow]);\n                }\n              }\n            });\n            this.cumul_snow=cumulSnowQuery\n            NProgress.done();\n          }).catch(error => console.log(error))\n        },\n      }\n    }\n\n</script>\n\n<style scoped>\n\n</style>\n"],"sourceRoot":"src/pages/Dashboard/Neige"}]}