{"remainingRequest":"/home/amos/Bureau/VSDR_site/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/amos/Bureau/VSDR_site/src/pages/Dashboard/Technical.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/amos/Bureau/VSDR_site/src/pages/Dashboard/Technical.vue","mtime":1622618531938},{"path":"/home/amos/Bureau/VSDR_site/node_modules/cache-loader/dist/cjs.js","mtime":1622616452493},{"path":"/home/amos/Bureau/VSDR_site/node_modules/babel-loader/lib/index.js","mtime":1622616452469},{"path":"/home/amos/Bureau/VSDR_site/node_modules/cache-loader/dist/cjs.js","mtime":1622616452493},{"path":"/home/amos/Bureau/VSDR_site/node_modules/vue-loader/lib/index.js","mtime":1622616466449}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBMQ2hlY2tib3ggZnJvbSAiQC9jb21wb25lbnRzL0lucHV0cy9DaGVja2JveCI7CmltcG9ydCBUZW1wZXJhdHVyZUNoYXJ0IGZyb20gIkAvY29tcG9uZW50cy9UZW1wZXJhdHVyZUNoYXJ0IjsKaW1wb3J0IGRvd25sb2FkQ3N2IGZyb20gInZ1ZS1qc29uLWNzdiI7CmltcG9ydCB7Q29sbGFwc2UsIENvbGxhcHNlSXRlbSwgT3B0aW9uLCBTZWxlY3R9IGZyb20gImVsZW1lbnQtdWkiOwppbXBvcnQge0Zvcm1Hcm91cElucHV0IGFzIEZnSW5wdXR9IGZyb20gIkAvY29tcG9uZW50cyI7CmltcG9ydCBkYl9yZXEgZnJvbSAiQC9jb25zdGFudHMvaW5mbHV4X3JlcXVlc3RzLmpzb24iOwppbXBvcnQgYXhpb3MgZnJvbSAiYXhpb3MiCmltcG9ydCBsYXRpbml6ZSBmcm9tICcuLi8uLi9qcy9sYXRpbml6ZScKaW1wb3J0IEFudGVubmFDYXJkIGZyb20gIi4uLy4uL2NvbXBvbmVudHMvQW50ZW5uYUNhcmQiOwppbXBvcnQgZG93bmxvYWREYXRhIGZyb20gIi4uLy4uL2NvbXBvbmVudHMvZG93bmxvYWREYXRhIjsKCmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAiVGVjaG5pY2FsIiwKICBjb21wb25lbnRzOiB7QW50ZW5uYUNhcmQsIExDaGVja2JveCwgZG93bmxvYWREYXRhfSwKICBjb21wb25lbnQ6IHsKICAgIFRlbXBlcmF0dXJlQ2hhcnQsIGRvd25sb2FkQ3N2LAogICAgW0NvbGxhcHNlLm5hbWVdOiBDb2xsYXBzZSwKICAgIFtDb2xsYXBzZUl0ZW0ubmFtZV06IENvbGxhcHNlSXRlbSwKICAgIExDaGVja2JveCwgRmdJbnB1dCwKICAgIFtTZWxlY3QubmFtZV06IFNlbGVjdCwKICAgIFtPcHRpb24ubmFtZV06IE9wdGlvbgogIH0sCgogIG1vdW50ZWQoKSB7CiAgICB0aGlzLiRQUk9KRUNUID0gbG9jYXRpb24uaG9zdG5hbWUuc3BsaXQoJy4nKVswXQogICAgY29uc29sZS5sb2codGhpcy4kU0VOU09SU0xJU1RKU09OKQogICAgZm9yKHZhciBpID0gMDsgaTx0aGlzLiRTRU5TT1JTTElTVEpTT05bMF0ubGVuZ3RoOyBpKyspewogICAgICBpZigodGhpcy4kU0VOU09SU0xJU1RKU09OWzBdW2ldLnR5cGUgPT09ICdoZWknIHx8IHRoaXMuJFNFTlNPUlNMSVNUSlNPTlswXVtpXS50eXBlID09PSAnZGVjZW50bGFiJykgJiYgdGhpcy4kU0VOU09SU0xJU1RKU09OWzBdW2ldLnByb2plY3QgPT0gdGhpcy4kUFJPSkVDVCl7CiAgICAgICAgdGhpcy4kZ2xvYmFsTG9hZERhdGEodGhpcy4kU0VOU09SU0xJU1RKU09OWzBdW2ldLnR5cGUsIHRoaXMuJFNFTlNPUlNMSVNUSlNPTlswXVtpXS5sb2NhdGlvbikKICAgICAgfWVsc2UgaWYgKHRoaXMuJFNFTlNPUlNMSVNUSlNPTlswXVtpXS50eXBlID09PSAnZ2F0ZXdheScgJiYgIHRoaXMuJFNFTlNPUlNMSVNUSlNPTlswXVtpXS5wcm9qZWN0ID09IHRoaXMuJFBST0pFQ1QpewogICAgICAgdmFyIGdhdGV3YXkgPSB7CiAgICAgICAgICAgIHR5cGU6IDEsCiAgICAgICAgICAgIGlkOiAxLAogICAgICAgICAgICBwb3NpdGlvbl9uYW1lOiB0aGlzLiRTRU5TT1JTTElTVEpTT05bMF1baV0ucmVhbE5hbWUsCiAgICAgICAgICAgIHBvc2l0aW9uOiBbdGhpcy4kU0VOU09SU0xJU1RKU09OWzBdW2ldLmxhdCwgdGhpcy4kU0VOU09SU0xJU1RKU09OWzBdW2ldLmxuZ10sCiAgICAgICAgICAgIGV1aTogdGhpcy4kU0VOU09SU0xJU1RKU09OWzBdW2ldLmV1aSwKICAgICAgICAgICAgbGFzdFNlZW46ICItIiwKICAgICAgICAgICAgdGltZVN0YW1wOiAiIiwKICAgICAgICAgICAgaXNVcDogZmFsc2UsCiAgICAgICAgICB9CiAgICAgICAgICB0aGlzLmFudGVubmFzLnB1c2goZ2F0ZXdheSkKICAgICAgfQogICAgfQogICAgY29uc29sZS5sb2codGhpcy5hbnRlbm5hcykKCiAgICAvL2xvY2FsIGNvcHkgb2YgdGhlIHNlbnNvcnMgYXJyYXkKICAgIHRoaXMuc2Vuc29ycyA9IHRoaXMuJGdsb2JhbFNlbnNvcnMKCiAgICAvKioKICAgICAqIFVwZGF0ZSBhbnRlbm5hIHN0YXRlcwogICAgICovCiAgICB2YXIgcHJvbWlzZXMgPSBbXQoKICAgIC8vIFdlIGZpcnN0IGNyZWF0ZSBhbiBhcnJheSBvZiBwcm9taXNlcyBmcm9tIHJlbW90ZSBkYXRhIGNvbnRhaW5pbmcgYW50ZW5uYXMgc3RhdHVzZXMKICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5hbnRlbm5hcy5sZW5ndGg7IGkrKykgewogICAgICBwcm9taXNlcy5wdXNoKAogICAgICAgIGF4aW9zKCdodHRwczovL25vZGVyZWQud2F0ZXJtb24uY2gvZ2F0ZXdheT9ldWk9JyArIHRoaXMuYW50ZW5uYXNbaV0uZXVpLCB7CiAgICAgICAgICBtZXRob2Q6ICdHRVQnLCAvLyAqR0VULCBQT1NULCBQVVQsIERFTEVURSwgZXRjLgogICAgICAgICAgbW9kZTogJ29yaWdpbicsIC8vIG5vLWNvcnMsICpjb3JzLCBzYW1lLW9yaWdpbgogICAgICAgICAgY2FjaGU6ICduby1jYWNoZScsIC8vICpkZWZhdWx0LCBuby1jYWNoZSwgcmVsb2FkLCBmb3JjZS1jYWNoZSwgb25seS1pZi1jYWNoZWQKICAgICAgICAgIGhlYWRlcnM6IHsKICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJwogICAgICAgICAgfQogICAgICAgIH0pKQogICAgfQoKICAgIC8vIFdoZW4gYWxsIHByb21pc2VzIHdpbGwgYmUgcmVzb2x2ZWQsIHdoZW4gdGhlbiBkbyB1cGRhdGUgdGltZXN0YW1wcwogICAgUHJvbWlzZS5hbGwocHJvbWlzZXMpCiAgICAgIC50aGVuKChyZXMpID0+IHsKICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJlcy5sZW5ndGg7IGkrKykgewogICAgICAgICAgbGV0IHRpbWVzdGFtcCA9IG5ldyBEYXRlKHJlc1tpXS5kYXRhLnRpbWVzdGFtcCk7CgogICAgICAgICAgdGhpcy5hbnRlbm5hc1tpXS50aW1lc3RhbXAgPSB0aW1lc3RhbXAudG9Mb2NhbGVTdHJpbmcoJ2ZyLUNIJywge2RhdGVTdHlsZTogJ3Nob3J0J30pICsgJyDDoCAnICsgdGltZXN0YW1wLnRvTG9jYWxlU3RyaW5nKCdmci1DSCcsIHt0aW1lU3R5bGU6ICdzaG9ydCd9KQogICAgICAgICAgbGV0IG5vdyA9IG5ldyBEYXRlKCk7CgogICAgICAgICAgaWYgKHRoaXMuJHNlY29uZEJldHdlZW5EYXRlKG5vdywgdGltZXN0YW1wKSA8IDYwKSB7CiAgICAgICAgICAgIHRoaXMuYW50ZW5uYXNbaV0uaXNVcCA9IHRydWU7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB0aGlzLmFudGVubmFzW2ldLmlzVXAgPSBmYWxzZTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0pCiAgICAgIC5maW5hbGx5KHggPT4gewogICAgICAgIHNldFRpbWVvdXQoKCkgPT4gewogICAgICAgICAgdGhpcy5wZW5kaW5nID0gZmFsc2U7CiAgICAgICAgfSwgNTAwCiAgICAgICkKICAgICAgfSkKCiAgICBmb3IodmFyIGkgPSAwOyBpIDwgdGhpcy4kU0VOU09SU0xJU1RKU09OWzBdLmxlbmd0aDsgaSsrKXsKICAgICAgaWYodGhpcy4kU0VOU09SU0xJU1RKU09OWzBdW2ldLnR5cGUgPT09ICdkZWNlbnRsYWInICYmIHRoaXMuJFNFTlNPUlNMSVNUSlNPTlswXVtpXS5wcm9qZWN0ID09PSB0aGlzLiRQUk9KRUNUKXsKICAgICAgICB2YXIgdGVtcCA9IHsibG9jYXRpb24iIDogdGhpcy4kU0VOU09SU0xJU1RKU09OWzBdW2ldLmxvY2F0aW9uICwKICAgICAgICAgICJyZWFsTmFtZSIgOiB0aGlzLiRTRU5TT1JTTElTVEpTT05bMF1baV0ucmVhbE5hbWV9CiAgICAgICAgdGhpcy5sb2NhdC5wdXNoKHRlbXApCiAgICAgIH0KICAgIH0KICB9LAoKICBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgbG9jYXQgOiBbXSwKICAgICAgc2Vuc29yU3RhdGU6ICcnLCAgICAgICAgICAgICAgICAgLy9zdGF0ZSBvZiB0aGUgc2Vuc29ycwogICAgICBhbnRlbm5hczogW10sCiAgICAgIHBlbmRpbmc6IHRydWUsCiAgICAgIHNlbnNvcnMgOiBbXQogICAgfQogIH0sCgogIG1ldGhvZHM6IHsKICAgIGdldExvY2F0aW9ucyA6IGZ1bmN0aW9uICgpIHsKICAgICAgdmFyIGxvY2F0ID0gW10KICAgICAgZm9yKHZhciBpID0gMDsgaSA8IHRoaXMuJFNFTlNPUlNMSVNUSlNPTlswXS5sZW5ndGg7IGkrKyl7CiAgICAgICAgaWYodGhpcy4kU0VOU09SU0xJU1RKU09OWzBdW2ldLnR5cGUgPT09ICdkZWNlbnRsYWInICYmIHRoaXMuJFNFTlNPUlNMSVNUSlNPTlswXVtpXS5wcm9qZWN0ID09PSB0aGlzLiRQUk9KRUNUKXsKICAgICAgICAgIHZhciB0ZW1wID0geyJsb2NhdGlvbiIgOiB0aGlzLiRTRU5TT1JTTElTVEpTT05bMF1baV0ubG9jYXRpb24gLAogICAgICAgICAgICAgICAgICAgICAgInJlYWxOYW1lIiA6IHRoaXMuJFNFTlNPUlNMSVNUSlNPTlswXVtpXS5yZWFsTmFtZX0KICAgICAgICAgIGxvY2F0LnB1c2godGVtcCkKICAgICAgICB9CiAgICAgIH0KICAgICAgLy9jb25zb2xlLmxvZyhsb2NhdCkKICAgICAgcmV0dXJuIGxvY2F0CiAgICB9CgogIH0KfQo="},{"version":3,"sources":["Technical.vue"],"names":[],"mappings":";;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA","file":"Technical.vue","sourceRoot":"src/pages/Dashboard","sourcesContent":["<template>\n  <div>\n   <h1>Technical page</h1>\n  </div>\n</template>\n\n<script>\n  import LCheckbox from \"@/components/Inputs/Checkbox\";\n  import TemperatureChart from \"@/components/TemperatureChart\";\n  import downloadCsv from \"vue-json-csv\";\n  import {Collapse, CollapseItem, Option, Select} from \"element-ui\";\n  import {FormGroupInput as FgInput} from \"@/components\";\n  import db_req from \"@/constants/influx_requests.json\";\n  import axios from \"axios\"\n  import latinize from '../../js/latinize'\n  import AntennaCard from \"../../components/AntennaCard\";\n  import downloadData from \"../../components/downloadData\";\n\n  export default {\n    name: \"Technical\",\n    components: {AntennaCard, LCheckbox, downloadData},\n    component: {\n      TemperatureChart, downloadCsv,\n      [Collapse.name]: Collapse,\n      [CollapseItem.name]: CollapseItem,\n      LCheckbox, FgInput,\n      [Select.name]: Select,\n      [Option.name]: Option\n    },\n\n    mounted() {\n      this.$PROJECT = location.hostname.split('.')[0]\n      console.log(this.$SENSORSLISTJSON)\n      for(var i = 0; i<this.$SENSORSLISTJSON[0].length; i++){\n        if((this.$SENSORSLISTJSON[0][i].type === 'hei' || this.$SENSORSLISTJSON[0][i].type === 'decentlab') && this.$SENSORSLISTJSON[0][i].project == this.$PROJECT){\n          this.$globalLoadData(this.$SENSORSLISTJSON[0][i].type, this.$SENSORSLISTJSON[0][i].location)\n        }else if (this.$SENSORSLISTJSON[0][i].type === 'gateway' &&  this.$SENSORSLISTJSON[0][i].project == this.$PROJECT){\n         var gateway = {\n              type: 1,\n              id: 1,\n              position_name: this.$SENSORSLISTJSON[0][i].realName,\n              position: [this.$SENSORSLISTJSON[0][i].lat, this.$SENSORSLISTJSON[0][i].lng],\n              eui: this.$SENSORSLISTJSON[0][i].eui,\n              lastSeen: \"-\",\n              timeStamp: \"\",\n              isUp: false,\n            }\n            this.antennas.push(gateway)\n        }\n      }\n      console.log(this.antennas)\n\n      //local copy of the sensors array\n      this.sensors = this.$globalSensors\n\n      /**\n       * Update antenna states\n       */\n      var promises = []\n\n      // We first create an array of promises from remote data containing antennas statuses\n      for (let i = 0; i < this.antennas.length; i++) {\n        promises.push(\n          axios('https://nodered.watermon.ch/gateway?eui=' + this.antennas[i].eui, {\n            method: 'GET', // *GET, POST, PUT, DELETE, etc.\n            mode: 'origin', // no-cors, *cors, same-origin\n            cache: 'no-cache', // *default, no-cache, reload, force-cache, only-if-cached\n            headers: {\n              'Content-Type': 'application/json'\n            }\n          }))\n      }\n\n      // When all promises will be resolved, when then do update timestamps\n      Promise.all(promises)\n        .then((res) => {\n          for (let i = 0; i < res.length; i++) {\n            let timestamp = new Date(res[i].data.timestamp);\n\n            this.antennas[i].timestamp = timestamp.toLocaleString('fr-CH', {dateStyle: 'short'}) + ' à ' + timestamp.toLocaleString('fr-CH', {timeStyle: 'short'})\n            let now = new Date();\n\n            if (this.$secondBetweenDate(now, timestamp) < 60) {\n              this.antennas[i].isUp = true;\n            } else {\n              this.antennas[i].isUp = false;\n            }\n          }\n        })\n        .finally(x => {\n          setTimeout(() => {\n            this.pending = false;\n          }, 500\n        )\n        })\n\n      for(var i = 0; i < this.$SENSORSLISTJSON[0].length; i++){\n        if(this.$SENSORSLISTJSON[0][i].type === 'decentlab' && this.$SENSORSLISTJSON[0][i].project === this.$PROJECT){\n          var temp = {\"location\" : this.$SENSORSLISTJSON[0][i].location ,\n            \"realName\" : this.$SENSORSLISTJSON[0][i].realName}\n          this.locat.push(temp)\n        }\n      }\n    },\n\n    data() {\n      return {\n        locat : [],\n        sensorState: '',                 //state of the sensors\n        antennas: [],\n        pending: true,\n        sensors : []\n      }\n    },\n\n    methods: {\n      getLocations : function () {\n        var locat = []\n        for(var i = 0; i < this.$SENSORSLISTJSON[0].length; i++){\n          if(this.$SENSORSLISTJSON[0][i].type === 'decentlab' && this.$SENSORSLISTJSON[0][i].project === this.$PROJECT){\n            var temp = {\"location\" : this.$SENSORSLISTJSON[0][i].location ,\n                        \"realName\" : this.$SENSORSLISTJSON[0][i].realName}\n            locat.push(temp)\n          }\n        }\n        //console.log(locat)\n        return locat\n      }\n\n    }\n  }\n</script>\n"]}]}