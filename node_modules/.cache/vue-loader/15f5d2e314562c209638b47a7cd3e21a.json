{"remainingRequest":"/home/amos/Bureau/VSDR_site/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/amos/Bureau/VSDR_site/src/pages/Dashboard/Temperature/Temperature.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/amos/Bureau/VSDR_site/src/pages/Dashboard/Temperature/Temperature.vue","mtime":1617204143000},{"path":"/home/amos/Bureau/VSDR_site/node_modules/cache-loader/dist/cjs.js","mtime":1622616452493},{"path":"/home/amos/Bureau/VSDR_site/node_modules/babel-loader/lib/index.js","mtime":1622616452469},{"path":"/home/amos/Bureau/VSDR_site/node_modules/cache-loader/dist/cjs.js","mtime":1622616452493},{"path":"/home/amos/Bureau/VSDR_site/node_modules/vue-loader/lib/index.js","mtime":1622616466449}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCi8vRElWRVJTCmltcG9ydCBtb21lbnQgZnJvbSAnbW9tZW50JwovL0NIQVJUCmltcG9ydCBUZW1wZXJhdHVyZUNoYXJ0IGZyb20gIi4uLy4uLy4uL2NvbXBvbmVudHMvVGVtcGVyYXR1cmVDaGFydCI7CgppbXBvcnQgZG93bmxvYWRDc3YgZnJvbSAndnVlLWpzb24tY3N2JwppbXBvcnQge0NvbGxhcHNlLCBDb2xsYXBzZUl0ZW19IGZyb20gJ2VsZW1lbnQtdWknCmltcG9ydCBMQ2hlY2tib3ggZnJvbSAiLi4vLi4vLi4vY29tcG9uZW50cy9JbnB1dHMvQ2hlY2tib3giOwppbXBvcnQge1NlbGVjdCwgT3B0aW9ufSBmcm9tICdlbGVtZW50LXVpJwppbXBvcnQge0Zvcm1Hcm91cElucHV0IGFzIEZnSW5wdXR9IGZyb20gJ3NyYy9jb21wb25lbnRzJwppbXBvcnQgZGJfcmVxIGZyb20gIi4uLy4uLy4uL2NvbnN0YW50cy9pbmZsdXhfcmVxdWVzdHMuanNvbiIKCmltcG9ydCBIaWdoY2hhcnRzIGZyb20gImhpZ2hjaGFydHMiOwovLyBkb24ndCBkZWxldGUgdGhpcwppbXBvcnQgQ2hhcnRNb2R1bGVNb3JlIGZyb20gJ2hpZ2hjaGFydHMvaGlnaGNoYXJ0cy1tb3JlJzsKaW1wb3J0IEhDU29saWRHYXVnZSBmcm9tICdoaWdoY2hhcnRzL21vZHVsZXMvc29saWQtZ2F1Z2UnCmltcG9ydCBleHBvcnRpbmdJbml0IGZyb20gImhpZ2hjaGFydHMvbW9kdWxlcy9leHBvcnRpbmciOwpleHBvcnRpbmdJbml0KEhpZ2hjaGFydHMpOwpDaGFydE1vZHVsZU1vcmUoSGlnaGNoYXJ0cyk7CkhDU29saWRHYXVnZShIaWdoY2hhcnRzKTsKCmNvbnN0IGZpZWxkX2dyb3VuZFRlbXBlcmF0dXJlID0gJ3BheWxvYWRfZmllbGRzX3RlbXBlcmF0dXJlX3RhcmdldF92YWx1ZScKY29uc3QgZmllbGRfYWlyVGVtcGVyYXR1cmUgPSAncGF5bG9hZF9maWVsZHNfdGVtcGVyYXR1cmVfaGVhZF92YWx1ZScKCmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAiVGVtcGVyYXR1cmUiLAogIGNvbXBvbmVudHM6IHtMQ2hlY2tib3h9LAogIGNvbXBvbmVudDogewogICAgVGVtcGVyYXR1cmVDaGFydCwgZG93bmxvYWRDc3YsCiAgICBbQ29sbGFwc2UubmFtZV06IENvbGxhcHNlLAogICAgW0NvbGxhcHNlSXRlbS5uYW1lXTogQ29sbGFwc2VJdGVtLAogICAgTENoZWNrYm94LCBGZ0lucHV0LAogICAgW1NlbGVjdC5uYW1lXTogU2VsZWN0LAogICAgW09wdGlvbi5uYW1lXTogT3B0aW9uCiAgfSwKICBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgc2Vuc29yczogW10sICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2FycmF5IGNvbnRhaW5pbmcgYWxsIHNlbnNvcnMgYmFzaWNzIHZhbHVlcwogICAgICBsb2NhdGlvbk5hbWU6IHRoaXMuJHJvdXRlLm5hbWUsICAgICAgICAgICAgIC8vcm91dGUgb2YgdGhlIHBhZ2UKICAgICAgc2VyaWVzX2NoYXJ0OiBbeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2NoYXJ0IHNlcmllLCB1c2UganVzdGUgaW4gdGhpcyBwYWdlCiAgICAgICAgZGF0YTogW10sCiAgICAgICAgdHVyYm9UaHJlc2hvbGQ6IDYwMDAwLAogICAgICB9XSwKICAgIH0KICB9LAogIG1vdW50ZWQoKSB7CiAgfSwKCiAgd2F0Y2g6IHsKICAgICckcm91dGUucm91dGUnOiB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vd2F0Y2ggaWYgdGhlIHJvdXRlIGhhcyBjaGFuZ2UgKHRoaXMgaXMgaG93IGkgbm93IHRoYXQgaSd2ZSBjaGFuZ2UgcGFnZSkKICAgICAgaGFuZGxlcjogZnVuY3Rpb24gKCkgeyAgICAgICAgICAgICAgICAgICAgICAgIC8vaWYgdGhlIHJvdXRlIGNoYW5nZSwgcmVsb2FkIGRhdGEKICAgICAgICB0aGlzLmxvY2F0aW9uTmFtZSA9IHRoaXMuJHJvdXRlLm5hbWUKICAgICAgICB0aGlzLiRnbG9iYWxMb2FkRGF0YSgnZGVjZW50bGFiJywgdGhpcy5sb2NhdGlvbk5hbWUpCiAgICAgICAgdGhpcy5zZW5zb3JzID0gdGhpcy4kZ2xvYmFsU2Vuc29ycwogICAgICAgIGxldCBzID0gW10KICAgICAgICAvLyBMZXQncyBsb2FkIHRoZSBzZXJpZSBhc3luY2hyb25vdXNseSBhbmQgcmVzb2x2ZSB0aGUgcHJvbWlzZSB3aGVuIGRvbmUKICAgICAgICB0aGlzLiRsb2FkU2VyaWUoJ2RlY2VudGxhYicsIHRoaXMubG9jYXRpb25OYW1lLCBmaWVsZF9ncm91bmRUZW1wZXJhdHVyZSwgJ1RlbXDDqXJhdHVyZSBzb2wnKS50aGVuKAogICAgICAgICAgcmVzdWx0ID0+IHMucHVzaChyZXN1bHRbMF0pCiAgICAgICAgKQogICAgICAgIC8vIERvIHRoZSBzYW1lIGZvciB0aGUgc2Vjb25kIHNlcmllcywgYWRhcHQgdGhlIGNvbG9yIGFzIHdlbGwKICAgICAgICB0aGlzLiRsb2FkU2VyaWUoJ2RlY2VudGxhYicsIHRoaXMubG9jYXRpb25OYW1lLCBmaWVsZF9haXJUZW1wZXJhdHVyZSwgJ1RlbXDDqXJhdHVyZSBhaXInKS50aGVuKAogICAgICAgICAgcmVzdWx0ID0+IHsKICAgICAgICAgICAgcmVzdWx0WzBdLmNvbG9yID0gJyNmNGI0MDAnOyAvL29yYW5nZQogICAgICAgICAgICBzLnB1c2gocmVzdWx0WzBdKTsKICAgICAgICAgIH0KICAgICAgICApCiAgICAgICAgLy8gVXBkYXRlIHRoZSBjaGFydCB3aXRoIHRoZSB1cGRhdGVkIHZhbHVlcwogICAgICAgIHRoaXMuc2VyaWVzX2NoYXJ0ID0gcwogICAgICB9LAogICAgICBkZWVwOiB0cnVlLAogICAgICBpbW1lZGlhdGU6IHRydWUKICAgIH0KICB9LAoKICBtZXRob2RzOiB7CgogIH0KfQo="},{"version":3,"sources":["Temperature.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8DA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA","file":"Temperature.vue","sourceRoot":"src/pages/Dashboard/Temperature","sourcesContent":["<template>\n  <div>\n    <h3>Température de l'air</h3>\n    <div class=\"row\"\n         v-for=\"(sensor, index) in sensors.filter(s => s.where === locationName , s=>s.type === 'decentlab') \">\n\n      <div class=\"col-lg-4\">\n        <card title=\"Il y a 1 heure\">\n          <h1 align=\"center\" v-if=\"sensor.temp_head1h[0]!=undefined\">{{sensor.temp_head1h[0]}}°C</h1>\n          <h1 align=\"center\" style=\"color: lightgray\" v-if=\"sensor.temp_head1h[0]===undefined\"> No data</h1>\n        </card>\n      </div>\n\n      <div class=\"col-lg-4\">\n        <card title=\"Il y a 30 minutes\">\n          <h1 align=\"center\" v-if=\"sensor.temp_head30m[0]!=undefined\">{{sensor.temp_head30m[0]}}°C</h1>\n          <h1 align=\"center\" style=\"color: lightgray\" v-if=\"sensor.temp_head30m[0]===undefined\"> No data</h1>\n        </card>\n      </div>\n\n      <div class=\"col-lg-4\">\n        <card title=\"Actuellement\">\n          <h1 align=\"center\" v-if=\"sensor.temp_head[0]!=undefined\">{{sensor.temp_head[0]}}°C</h1>\n          <h1 align=\"center\" style=\"color: lightgray\" v-if=\"sensor.temp_head[0]===undefined\"> No data</h1>\n        </card>\n      </div>\n    </div>\n    <h3>Température du sol</h3>\n    <div class=\"row\"\n         v-for=\"(sensor, index) in sensors.filter(s => s.where === locationName , s=>s.type === 'decentlab')\">\n      <div class=\"col-lg-4\">\n        <card title=\"Il y a 1 heure\">\n          <h1 align=\"center\" v-if=\"sensor.temp_target1h[0]!=undefined\">{{sensor.temp_target1h[0]}}°C</h1>\n          <h1 align=\"center\" style=\"color: lightgray\" v-if=\"sensor.temp_target1h[0]===undefined\"> No data</h1>\n\n        </card>\n      </div>\n\n      <div class=\"col-lg-4\">\n        <card title=\"Il y a 30 minutes\">\n          <h1 align=\"center\" v-if=\"sensor.temp_target30m[0]!=undefined\">{{sensor.temp_target30m[0]}}°C</h1>\n          <h1 align=\"center\" style=\"color: lightgray\" v-if=\"sensor.temp_target30m[0]===undefined\"> No data</h1>\n        </card>\n      </div>\n\n      <div class=\"col-lg-4\">\n        <card title=\"Actuellement\">\n          <h1 align=\"center\" v-if=\"sensor.temp_target[0]!=undefined\">{{sensor.temp_target[0]}}°C</h1>\n          <h1 align=\"center\" style=\"color: lightgray\" v-if=\"sensor.temp_target[0]===undefined\"> No data</h1>\n\n        </card>\n      </div>\n    </div>\n    <div class=\"col-lg-13\">\n      <card title=\"Courbes des températures\">\n        <TemperatureChart style=\"padding-right: 10px\" :dataTemperatureChart=\"series_chart\" />\n      </card>\n    </div>\n  </div>\n</template>\n\n<script>\n  //DIVERS\n  import moment from 'moment'\n  //CHART\n  import TemperatureChart from \"../../../components/TemperatureChart\";\n\n  import downloadCsv from 'vue-json-csv'\n  import {Collapse, CollapseItem} from 'element-ui'\n  import LCheckbox from \"../../../components/Inputs/Checkbox\";\n  import {Select, Option} from 'element-ui'\n  import {FormGroupInput as FgInput} from 'src/components'\n  import db_req from \"../../../constants/influx_requests.json\"\n\n  import Highcharts from \"highcharts\";\n  // don't delete this\n  import ChartModuleMore from 'highcharts/highcharts-more';\n  import HCSolidGauge from 'highcharts/modules/solid-gauge'\n  import exportingInit from \"highcharts/modules/exporting\";\n  exportingInit(Highcharts);\n  ChartModuleMore(Highcharts);\n  HCSolidGauge(Highcharts);\n\n  const field_groundTemperature = 'payload_fields_temperature_target_value'\n  const field_airTemperature = 'payload_fields_temperature_head_value'\n\n  export default {\n    name: \"Temperature\",\n    components: {LCheckbox},\n    component: {\n      TemperatureChart, downloadCsv,\n      [Collapse.name]: Collapse,\n      [CollapseItem.name]: CollapseItem,\n      LCheckbox, FgInput,\n      [Select.name]: Select,\n      [Option.name]: Option\n    },\n    data() {\n      return {\n        sensors: [],                                //array containing all sensors basics values\n        locationName: this.$route.name,             //route of the page\n        series_chart: [{                            //chart serie, use juste in this page\n          data: [],\n          turboThreshold: 60000,\n        }],\n      }\n    },\n    mounted() {\n    },\n\n    watch: {\n      '$route.route': {                               //watch if the route has change (this is how i now that i've change page)\n        handler: function () {                        //if the route change, reload data\n          this.locationName = this.$route.name\n          this.$globalLoadData('decentlab', this.locationName)\n          this.sensors = this.$globalSensors\n          let s = []\n          // Let's load the serie asynchronously and resolve the promise when done\n          this.$loadSerie('decentlab', this.locationName, field_groundTemperature, 'Température sol').then(\n            result => s.push(result[0])\n          )\n          // Do the same for the second series, adapt the color as well\n          this.$loadSerie('decentlab', this.locationName, field_airTemperature, 'Température air').then(\n            result => {\n              result[0].color = '#f4b400'; //orange\n              s.push(result[0]);\n            }\n          )\n          // Update the chart with the updated values\n          this.series_chart = s\n        },\n        deep: true,\n        immediate: true\n      }\n    },\n\n    methods: {\n\n    }\n  }\n</script>\n<style scoped>\n</style>\n"]}]}