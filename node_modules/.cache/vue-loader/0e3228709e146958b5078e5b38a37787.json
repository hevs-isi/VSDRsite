{"remainingRequest":"/home/amos/Bureau/VSDR_site/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/amos/Bureau/VSDR_site/src/pages/Dashboard/Neige/Snow.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/amos/Bureau/VSDR_site/src/pages/Dashboard/Neige/Snow.vue","mtime":1622618455084},{"path":"/home/amos/Bureau/VSDR_site/node_modules/cache-loader/dist/cjs.js","mtime":1622616452493},{"path":"/home/amos/Bureau/VSDR_site/node_modules/babel-loader/lib/index.js","mtime":1622616452469},{"path":"/home/amos/Bureau/VSDR_site/node_modules/cache-loader/dist/cjs.js","mtime":1622616452493},{"path":"/home/amos/Bureau/VSDR_site/node_modules/vue-loader/lib/index.js","mtime":1622616466449}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KCiAvL0NIQVJUCiBpbXBvcnQgTlByb2dyZXNzIGZyb20gIm5wcm9ncmVzcyI7CiBpbXBvcnQgSGlnaGNoYXJ0cyBmcm9tICJoaWdoY2hhcnRzIjsKIGltcG9ydCBDaGFydE1vZHVsZU1vcmUgZnJvbSAnaGlnaGNoYXJ0cy9oaWdoY2hhcnRzLW1vcmUnOwogaW1wb3J0IEhDU29saWRHYXVnZSBmcm9tICdoaWdoY2hhcnRzL21vZHVsZXMvc29saWQtZ2F1Z2UnCiBpbXBvcnQgZXhwb3J0aW5nSW5pdCBmcm9tICJoaWdoY2hhcnRzL21vZHVsZXMvZXhwb3J0aW5nIjsKIGltcG9ydCBheGlvcyBmcm9tICJheGlvcyI7CgogZXhwb3J0aW5nSW5pdChIaWdoY2hhcnRzKTsKIENoYXJ0TW9kdWxlTW9yZShIaWdoY2hhcnRzKTsKIEhDU29saWRHYXVnZShIaWdoY2hhcnRzKTsKCiBjb25zdCBmaWVsZF9zbm93ID0gJ3BheWxvYWRfZmllbGRzX1dhdGVySGVpZ2h0TW0nCiBsZXQgZGVjaW1hbCA9IDI7CiBleHBvcnQgZGVmYXVsdCB7CiAgICAgbmFtZTogIlNub3ciLAogICAgIGNvbXBvbmVudDoge30sCgogICAgIGRhdGEoKSB7CiAgICAgICByZXR1cm4gewogICAgICAgICBzZW5zb3JzOiBbXSwgICAgICAgICAgICAgICAgICAgICAgICAgIC8vY29udGFpbiB0aGUgc2Vuc29ycyB2YWx1ZXMKICAgICAgICAgbG9jYXRpb25OYW1lOiB0aGlzLiRyb3V0ZS5uYW1lLCAgICAgICAvL3JvdXRlIHRvIGtub3cgd2l0Y2ggaW5mb3JtYXRpb24gdG8gbG9hZAogICAgICAgICBzZXJpZXNfY2hhcnQ6IFtdLAogICAgICAgICBkZWx0YV9zbm93OiIiLCAgICAgICAgICAgICAgICAgICAgICAgIC8vZGVsdGEgYmV0d2VlbiAxaG91ciBhZ28gYW5kIG5vdwogICAgICAgICBjdW11bF9zbm93OiIiLCAgICAgICAgICAgICAgICAgICAgICAgIC8vc25vdyBjdW11bGF0ZSBzaW5jZSAzNjUgZGF5cwogICAgICAgICBzbm93T2Zmc2V0IDogMAogICAgICAgfQogICAgIH0sCiAgIGNyZWF0ZWQoKSB7Ci8vICAgICBjb25zb2xlLmxvZyh0aGlzLnNlbnNvcnMpCgogICB9LAoKICAgd2F0Y2g6IHsKICAgICAgICckcm91dGUucm91dGUnOiB7ICAgICAgICAgICAgICAgICAgICAgICAvLyB3YXRjaCBpZiByb3V0ZSBoYXMgY2hhbmdlZCAodGhpcyBpcyBob3cgcGFnZSBjaGFuZ2VzIGFyZSBkZXRlY3RlZCkKICAgICAgICAgaGFuZGxlcjogZnVuY3Rpb24gKCkgewogICAgICAgICAgIC8vIElmIHJvdXRlIGNoYW5nZWQsIHJlbG9hZCBkYXRhCiAgICAgICAgICAgdGhpcy5sb2NhdGlvbk5hbWUgPSB0aGlzLiRyb3V0ZS5uYW1lCiAgICAgICAgICAgdGhpcy4kZ2xvYmFsTG9hZERhdGEoJ2hlaScsdGhpcy5sb2NhdGlvbk5hbWUpOwogICAgICAgICAgIHRoaXMuc2Vuc29ycz0gdGhpcy4kZ2xvYmFsU2Vuc29ycwoKICAgICAgICAgICB2YXIgcHJvamVjdCAgPSBsb2NhdGlvbi5ob3N0bmFtZS5zcGxpdCgnLicpWzBdCiAgICAgICAgICAgLy9nZXQgdGhlIG9mZnNldCBmcm9tIGpzb24gZmlsZSBvbiBzZXJ2ZXIKICAgICAgICAgICBheGlvcy5nZXQoJ2h0dHBzOi8vc25vdy1zZXJ2ZXIud2F0ZXJtb24uY2g6NDQzL3Nub3dPZmZzZXQnKQogICAgICAgICAgICAgLnRoZW4ocmVzID0+IHsKICAgICAgICAgICAgICAgZm9yKHZhciBpID0gMCA7IGk8cmVzLmRhdGEubGVuZ3RoOyBpKyspewogICAgICAgICAgICAgICAgIGlmKHJlcy5kYXRhW2ldLnByb2plY3QgPT09IHByb2plY3QgJiYgcmVzLmRhdGFbaV0ubG9jYXRpb249PSB0aGlzLmxvY2F0aW9uTmFtZSl7CiAgICAgICAgICAgICAgICAgICB0aGlzLnNub3dPZmZzZXQgPSByZXMuZGF0YVtpXS5vZmZzZXQKICAgICAgICAgICAgICAgICAgIHRoaXMuJGxvYWRTZXJpZSgnaGVpJywgdGhpcy5sb2NhdGlvbk5hbWUsIGZpZWxkX3Nub3csICdIYXV0ZXVyIGRlIG5laWdlJywgJzEwbScsICc3ZCcsIHRoaXMuc25vd09mZnNldCkKICAgICAgICAgICAgICAgICAgICAgLnRoZW4oCiAgICAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UgPT4gdGhpcy5zZXJpZXNfY2hhcnQgPSByZXNwb25zZQogICAgICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICAgICB0aGlzLmxvYWRDdW11bGF0ZVNub3dEYXRhKCdoZWknLHRoaXMubG9jYXRpb25OYW1lLCBmaWVsZF9zbm93LCB0aGlzLnNub3dPZmZzZXQpCiAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICB9CiAgICAgICAgICAgICB9KQogICAgICAgICAgICAgLmNhdGNoKGVycm9yID0+IHsKICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXJyb3IpCiAgICAgICAgICAgICAgIC8vIE1hbmFnZSBlcnJvcnMgaWYgZm91bmQgYW55CiAgICAgICAgICAgICB9KQogICAgICAgICB9LAogICAgICAgICBkZWVwOiB0cnVlLAogICAgICAgICBpbW1lZGlhdGU6IHRydWUKICAgICAgIH0sCgogICAgIH0sCgogICAgIG1ldGhvZHM6ewogICAgICAgLyoqCiAgICAgICAgKiBsb2FkIGN1bXVsYXRlIHNub3cgZGF0YSBzaW5jZSAzNjVkYXlzCiAgICAgICAgKiBAcmV0dXJucyB7Kn0KICAgICAgICAqLwogICAgICAgbG9hZEN1bXVsYXRlU25vd0RhdGE6IGZ1bmN0aW9uKHNlbnNvclR5cGUsIGxvY2F0aW9uICxmaWVsZF9zbm93LCBvZmZzZXQpIHsKICAgICAgICAgLypjcmVhdGUgdGhlIHF1ZXJ5Ki8KICAgICAgICAgbGV0IHF1ZXJ5ID0gJ1NFTEVDVCAnICsgZmllbGRfc25vdyArICcgRlJPTSBtcXR0X2NvbnN1bWVyIHdoZXJlICcrCiAgICAgICAgICAgJyInKyAndG9waWMnICsnIicrJyA9JyArIiciKyAnaGVzX2F5ZW50LXNub3cvZGV2aWNlcy8nICsKICAgICAgICAgICBzZW5zb3JUeXBlICsgJy0nICsgbG9jYXRpb24gICsnL3VwJyArIiciKyAnQU5EIHRpbWU+bm93KCktMzY1ZCcKCiAgICAgICAgIGxldCBjdW11bFNub3dRdWVyeT0wOwogICAgICAgICBQcm9taXNlLmFsbChbCiAgICAgICAgICAgdGhpcy4kaW5mbHV4Q2xpZW50LnF1ZXJ5KHF1ZXJ5KSwgLy8gV0hFUkUgdGltZT5ub3coKS0zNjVkCiAgICAgICAgIF0pLnRoZW4ocGFyc2VkUmVzID0+IHsKICAgICAgICAgICBwYXJzZWRSZXMubWFwKCBhcnIgPT4gewogICAgICAgICAgICAgY3VtdWxTbm93UXVlcnkgPSBhcnJbMF1bZmllbGRfc25vd10tb2Zmc2V0OwogICAgICAgICAgICAgLyoKICAgICAgICAgICAgIHRoaXMgbG9vcCBzaG93IGlmIHRoZSB2YWx1ZSBhdCBwb3NpdGlvbiBpK2kgaXMgYmlnZ2VyIHRoYW4gdGhlIHByZXZpb3VzLCBpZiB5ZXMsIGFkZCB0aGUgZGlmZmVyZW5jZQogICAgICAgICAgICAgdG8gY3VtdWxzbm93CiAgICAgICAgICAgICAgKi8KICAgICAgICAgICAgIGZvcih2YXIgaSA9IDE7IGk8YXJyLmxlbmd0aC0xO2krKyl7CiAgICAgICAgICAgICAgIGlmKGFycltpXVtmaWVsZF9zbm93XTw9IGFycltpLTFdW2ZpZWxkX3Nub3ddKXsKICAgICAgICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgICAgICAgfWVsc2V7CiAgICAgICAgICAgICAgICAgY3VtdWxTbm93UXVlcnkgPSBjdW11bFNub3dRdWVyeSArIChhcnJbaV1bZmllbGRfc25vd10gLSBhcnJbaS0xXVtmaWVsZF9zbm93XSk7CiAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgIH0KICAgICAgICAgICB9KTsKICAgICAgICAgICB0aGlzLmN1bXVsX3Nub3c9Y3VtdWxTbm93UXVlcnkKICAgICAgICAgICBOUHJvZ3Jlc3MuZG9uZSgpOwogICAgICAgICB9KS5jYXRjaChlcnJvciA9PiBjb25zb2xlLmxvZyhlcnJvcikpCiAgICAgICB9LAogICAgIH0KICAgfQoK"},{"version":3,"sources":["Snow.vue"],"names":[],"mappings":";;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Snow.vue","sourceRoot":"src/pages/Dashboard/Neige","sourcesContent":["<template>\n  <div>\n   <h1>Snow page</h1>\n  </div>\n</template>\n\n<script>\n  //CHART\n  import NProgress from \"nprogress\";\n  import Highcharts from \"highcharts\";\n  import ChartModuleMore from 'highcharts/highcharts-more';\n  import HCSolidGauge from 'highcharts/modules/solid-gauge'\n  import exportingInit from \"highcharts/modules/exporting\";\n  import axios from \"axios\";\n\n  exportingInit(Highcharts);\n  ChartModuleMore(Highcharts);\n  HCSolidGauge(Highcharts);\n\n  const field_snow = 'payload_fields_WaterHeightMm'\n  let decimal = 2;\n  export default {\n      name: \"Snow\",\n      component: {},\n\n      data() {\n        return {\n          sensors: [],                          //contain the sensors values\n          locationName: this.$route.name,       //route to know witch information to load\n          series_chart: [],\n          delta_snow:\"\",                        //delta between 1hour ago and now\n          cumul_snow:\"\",                        //snow cumulate since 365 days\n          snowOffset : 0\n        }\n      },\n    created() {\n //     console.log(this.sensors)\n\n    },\n\n    watch: {\n        '$route.route': {                       // watch if route has changed (this is how page changes are detected)\n          handler: function () {\n            // If route changed, reload data\n            this.locationName = this.$route.name\n            this.$globalLoadData('hei',this.locationName);\n            this.sensors= this.$globalSensors\n\n            var project  = location.hostname.split('.')[0]\n            //get the offset from json file on server\n            axios.get('https://snow-server.watermon.ch:443/snowOffset')\n              .then(res => {\n                for(var i = 0 ; i<res.data.length; i++){\n                  if(res.data[i].project === project && res.data[i].location== this.locationName){\n                    this.snowOffset = res.data[i].offset\n                    this.$loadSerie('hei', this.locationName, field_snow, 'Hauteur de neige', '10m', '7d', this.snowOffset)\n                      .then(\n                        response => this.series_chart = response\n                      )\n                    this.loadCumulateSnowData('hei',this.locationName, field_snow, this.snowOffset)\n                  }\n                }\n              })\n              .catch(error => {\n                console.log(error)\n                // Manage errors if found any\n              })\n          },\n          deep: true,\n          immediate: true\n        },\n\n      },\n\n      methods:{\n        /**\n         * load cumulate snow data since 365days\n         * @returns {*}\n         */\n        loadCumulateSnowData: function(sensorType, location ,field_snow, offset) {\n          /*create the query*/\n          let query = 'SELECT ' + field_snow + ' FROM mqtt_consumer where '+\n            '\"'+ 'topic' +'\"'+' =' +\"'\"+ 'hes_ayent-snow/devices/' +\n            sensorType + '-' + location  +'/up' +\"'\"+ 'AND time>now()-365d'\n\n          let cumulSnowQuery=0;\n          Promise.all([\n            this.$influxClient.query(query), // WHERE time>now()-365d\n          ]).then(parsedRes => {\n            parsedRes.map( arr => {\n              cumulSnowQuery = arr[0][field_snow]-offset;\n              /*\n              this loop show if the value at position i+i is bigger than the previous, if yes, add the difference\n              to cumulsnow\n               */\n              for(var i = 1; i<arr.length-1;i++){\n                if(arr[i][field_snow]<= arr[i-1][field_snow]){\n                  continue;\n                }else{\n                  cumulSnowQuery = cumulSnowQuery + (arr[i][field_snow] - arr[i-1][field_snow]);\n                }\n              }\n            });\n            this.cumul_snow=cumulSnowQuery\n            NProgress.done();\n          }).catch(error => console.log(error))\n        },\n      }\n    }\n\n</script>\n\n<style scoped>\n\n</style>\n"]}]}