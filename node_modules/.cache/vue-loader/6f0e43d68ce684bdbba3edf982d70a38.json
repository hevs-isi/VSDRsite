{"remainingRequest":"/home/amos/Bureau/VSDR_site/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/amos/Bureau/VSDR_site/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/amos/Bureau/VSDR_site/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/amos/Bureau/VSDR_site/src/pages/Dashboard/Temperature/Temperature.vue?vue&type=template&id=a6b314ac&scoped=true&","dependencies":[{"path":"/home/amos/Bureau/VSDR_site/src/pages/Dashboard/Temperature/Temperature.vue","mtime":1617204143000},{"path":"/home/amos/Bureau/VSDR_site/node_modules/cache-loader/dist/cjs.js","mtime":1622616452493},{"path":"/home/amos/Bureau/VSDR_site/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1622616466449},{"path":"/home/amos/Bureau/VSDR_site/node_modules/cache-loader/dist/cjs.js","mtime":1622616452493},{"path":"/home/amos/Bureau/VSDR_site/node_modules/vue-loader/lib/index.js","mtime":1622616466449}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}