{"remainingRequest":"/home/amos/Bureau/VSDR_site/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/amos/Bureau/VSDR_site/src/pages/Dashboard/Dashboard/Overview.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/home/amos/Bureau/VSDR_site/src/pages/Dashboard/Dashboard/Overview.vue","mtime":1617204143000},{"path":"/home/amos/Bureau/VSDR_site/node_modules/css-loader/dist/cjs.js","mtime":1622616466311},{"path":"/home/amos/Bureau/VSDR_site/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1622616466449},{"path":"/home/amos/Bureau/VSDR_site/node_modules/postcss-loader/src/index.js","mtime":1622616466430},{"path":"/home/amos/Bureau/VSDR_site/node_modules/cache-loader/dist/cjs.js","mtime":1622616452493},{"path":"/home/amos/Bureau/VSDR_site/node_modules/vue-loader/lib/index.js","mtime":1622616466449}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLmxpZ2h0VGV4dCB7CiAgY29sb3I6IGRhcmtncmV5Owp9Cg=="},{"version":3,"sources":["Overview.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuUA;AACA;AACA","file":"Overview.vue","sourceRoot":"src/pages/Dashboard/Dashboard","sourcesContent":["<template>\n  <div>\n    <div class=\"row\">\n      <!--temperature part-->\n      <div class=\"col-xl-8 col-md-16\">\n\n        <card>\n          <h4 class=\"card-title\">Températures du sol - 24 dernières heures</h4>\n          <TemperatureChartGlobal :dataTemperatureGlobalChart=\"series_chart\"/>\n        </card>\n\n        <h4>Mesures actuelles</h4>\n        <div class=\"row\">\n          <div class=\"col-lg-4\" v-for=\"(sensor) in sortedSensors.filter( s=>s.type === 'decentlab')\">\n\n            <!--{{sensor.frostPointValue}}-->\n\n            <div v-if=\"sensor.frostRiskValue[0] == 1\">\n              <card :title=\"sensor.realName\"><!--NO FROST-->\n                <div class=\"row vertical-center\">\n                  <div class=\"col-lg-6\"\n                       style=\"text-align: center; border-right-style: solid ; border-right-color: #dcdcdc\">\n                    <h3>{{sensor.temp_target[0]}}°C</h3>\n                    <div class=\"lightText\">Sol</div>\n                  </div>\n                  <div class=\"col-lg-6\" style=\"text-align: center\">\n                    <h3>{{sensor.temp_head[0]}}°C</h3>\n                    <div class=\"lightText\">Air</div>\n                  </div>\n                </div>\n                <br>\n                <div class=\"row vertical-center\" v-if=\"sensor.humidity[0] != undefined\">\n                  <div class=\"col-lg-6\" style=\"text-align: center; border-right-style: solid ; border-right-color: #dcdcdc\">\n                    <h3 v-if=\"sensor.temp_head <= 0\">{{sensor.frostPointValue[0]}}°C</h3>\n                    <h3 v-else>-</h3>\n                    <div class=\"lightText\">Point de givrage</div>\n                  </div>\n                  <div class=\"col-lg-6\" style=\"text-align: center\">\n                    <h3>{{sensor.humidity[0].toFixed(1)}}%</h3>\n                    <div class=\"lightText\">Humidité</div>\n                  </div>\n                </div>\n                <div class=\"col-lg-12\" style=\"text-align: center\">\n                  <h4>Risque de givre élevé </h4>\n                  <img src=\"../../../../public/static/img/warningFrost.png\" align=\"center\" width=\"35%\">\n                </div>\n              </card>\n            </div>\n\n            <div v-if=\"sensor.frostRiskValue[0] == 0\">\n              <card :title=\"sensor.realName\"><!--NO FROST-->\n                <div class=\"row vertical-center\">\n                  <div class=\"col-lg-6\"\n                       style=\"text-align: center; border-right-style: solid ; border-right-color: #dcdcdc\">\n                    <h3>{{sensor.temp_target[0]}}°C</h3>\n                    <div class=\"lightText\">Sol</div>\n                  </div>\n                  <div class=\"col-lg-6\" style=\"text-align: center\">\n                    <h3>{{sensor.temp_head[0]}}°C</h3>\n                    <div class=\"lightText\">Air</div>\n                  </div>\n\n                </div>\n                <br>\n                <div class=\"row vertical-center\" v-if=\"sensor.humidity[0] != undefined\">\n                  <div class=\"col-lg-6\" style=\"text-align: center; border-right-style: solid ; border-right-color: #dcdcdc\">\n                    <h3 v-if=\"sensor.temp_head <= 0\">{{sensor.frostPointValue[0]}}°C</h3>\n                    <h3 v-else>-</h3>\n                    <div class=\"lightText\">Point de givrage</div>\n                  </div>\n                  <div class=\"col-lg-6\" style=\"text-align: center\">\n                    <h3>{{sensor.humidity[0].toFixed(1)}}%</h3>\n                    <div class=\"lightText\">Humidité</div>\n                  </div>\n                </div>\n                <div class=\"col-lg-12\" style=\"text-align: center\">\n                  <h4>Risque de givre modéré</h4>\n                  <img src=\"../../../../public/static/img/warningLightFrost.png\" align=\"center\" width=\"35%\">\n                </div>\n              </card>\n            </div>\n\n            <div v-if=\"sensor.frostRiskValue[0] == -1\">\n              <card :title=\"sensor.realName\"><!--NO FROST-->\n                <div class=\"row vertical-center\">\n                  <div class=\"col-lg-6\"\n                       style=\"text-align: center; border-right-style: solid ; border-right-color: #dcdcdc\">\n                    <h3>{{sensor.temp_target[0]}}°C</h3>\n                    <div class=\"lightText\">Sol</div>\n                  </div>\n                  <div class=\"col-lg-6\" style=\"text-align: center\">\n                    <h3>{{sensor.temp_head[0]}}°C</h3>\n                    <div class=\"lightText\">Air</div>\n                  </div>\n                </div>\n                <br>\n                <div class=\"row vertical-center\" v-if=\"sensor.humidity[0] != undefined\">\n                  <div class=\"col-lg-6\" style=\"text-align: center; border-right-style: solid ; border-right-color: #dcdcdc\">\n                    <h3 v-if=\"sensor.temp_head <= 0\">{{sensor.frostPointValue[0]}}°C</h3>\n                    <h3 v-else>-</h3>\n                    <div class=\"lightText\">Point de givrage</div>\n                  </div>\n                  <div class=\"col-lg-6\" style=\"text-align: center\">\n                    <h3>{{sensor.humidity[0].toFixed(1)}}%</h3>\n                    <div class=\"lightText\">Humidité</div>\n                  </div>\n                </div>\n              </card>\n            </div>\n\n          </div>\n        </div>\n\n  <!--      <card>\n          <div>\n            <h4 class=\"card-title\">Précipitations</h4>\n            <br>\n            <table class=\"table table-striped\">\n              <thead class=\"thead-light\">\n              <tr>\n                <th scope=\"col\"></th>\n                <th scope=\"col\" v-if=\"window.width > 500\">Depuis 4 h</th>\n                <th scope=\"col\" v-if=\"window.width <= 500\">4 h</th>\n                <th scope=\"col\" v-if=\"window.width > 500\">Depuis 1 h</th>\n                <th scope=\"col\" v-if=\"window.width <= 500\">1 h</th>\n                <th scope=\"col\" v-if=\"window.width > 500\">Depuis 30 m</th>\n                <th scope=\"col\" v-if=\"window.width <= 500\">30 m</th>\n              </tr>\n              </thead>\n              <tbody>\n              <tr v-for=\"(sensor,index) in sortedSensors.filter( s=>s.type === 'hei')\">\n                <th scope=\"row\">{{sensor.realName}}</th>\n                <td v-if=\"sensor.cumul_snow4h[0] != undefined && ((sensor.cumul_snow4h[0]-sensor.snowOffset[0])/10) >=0\">{{ ((sensor.cumul_snow4h[0]-sensor.snowOffset[0])/10).toFixed(0)}} cm</td>\n                <td v-else>0 cm</td>\n                <td v-if=\"sensor.cumul_snow1h[0] != undefined && ((sensor.cumul_snow1h[0]-sensor.snowOffset[0])/10) >=0\">{{ ((sensor.cumul_snow1h[0]-sensor.snowOffset[0])/10).toFixed(0)}} cm</td>\n                <td v-else>0 cm</td>\n                <td v-if=\"sensor.cumul_snow30m[0] != undefined && ((sensor.cumul_snow30m[0]-sensor.snowOffset[0])/10) >=0\">{{ ((sensor.cumul_snow30m[0]-sensor.snowOffset[0])/10).toFixed(0)}} cm</td>\n                <td v-else>0 cm</td>\n              </tr>\n              </tbody>\n            </table>\n          </div>\n        </card>\n\n        <card>\n          <div>\n            <h4 class=\"card-title\">Hauteurs de neige</h4>\n            <br>\n            <table class=\"table table-striped\">\n              <thead class=\"thead-light\">\n              <tr>\n                <th scope=\"col\"></th>\n                <th scope=\"col\" v-if=\"window.width > 500\">Il y a 4 h</th>\n                <th scope=\"col\" v-if=\"window.width <= 500\">4h</th>\n                <th scope=\"col\" v-if=\"window.width > 500\">Il y a 1 h</th>\n                <th scope=\"col\" v-if=\"window.width <= 500\">1h</th>\n                <th scope=\"col\" v-if=\"window.width > 500\">Il y a 30 m</th>\n                <th scope=\"col\" v-if=\"window.width <= 500\">30 m</th>\n                <th scope=\"col\" v-if=\"window.width > 500\">Actuellement</th>\n                <th scope=\"col\" v-if=\"window.width <= 500\">Maint.</th>\n              </tr>\n              </thead>\n              <tbody>\n              <tr v-for=\"(sensor) in sortedSensors.filter( s=>s.type === 'hei')\">\n\n                <th scope=\"row\">{{sensor.realName}}</th>\n                <td v-if=\"sensor.snow_4h[0] != undefined && (sensor.snow_4h[0]-sensor.snowOffset[0])/10 >= 0\">{{ ((sensor.snow_4h[0]-sensor.snowOffset[0])/10).toFixed(0)}} cm</td>\n                <td v-else>0 cm</td>\n                <td v-if=\"sensor.snow_1h[0] != undefined && (sensor.snow_1h[0]-sensor.snowOffset[0])/10 >= 0\">{{ ((sensor.snow_1h[0]-sensor.snowOffset[0])/10).toFixed(0)}} cm</td>\n                <td v-else>0 cm</td>\n                <td v-if=\"sensor.snow_30m[0] != undefined && (sensor.snow_30m[0]-sensor.snowOffset[0])/10 >= 0\">{{ ((sensor.snow_30m[0]-sensor.snowOffset[0])/10).toFixed(0)}} cm</td>\n                <td v-else>0 cm</td>\n                <td v-if=\"sensor.snow[0] != undefined && (sensor.snow[0]-sensor.snowOffset[0])/10 >= 0\">{{ ((sensor.snow[0]-sensor.snowOffset[0])/10).toFixed(0)}} cm</td>\n                <td v-else>0 cm</td>\n              </tr>\n              </tbody>\n            </table>\n          </div>\n        </card>-->\n\n        <WebcamCard :src=\"cam.url\" :location=\"cam.location\"></WebcamCard>\n      </div>\n\n      <div class=\"col-xl-4 col-md-7\">\n        <!--Map part-->\n        <MapSensor v-if=\"this.$PROJECT=='ayent'\" :sensors=\"this.sensors\" :center=\"centerMapAyent\"></MapSensor>\n        <MapSensor v-if=\"this.$PROJECT=='st-leo'\" :sensors=\"this.sensors\" :center=\"centerMapStleo\"></MapSensor>\n\n        <!--Meteo widget-->\n        <meteo v-if=\"this.$PROJECT=='ayent'\" :src=\"meteoSrcAyent\"></meteo>\n        <meteo v-if=\"this.$PROJECT=='st-leo'\" :src=\"meteoSrcStleo\"></meteo>\n      </div>\n    </div>\n  </div>\n</template>\n\n\n<script>\n  import {Table, TableColumn} from 'element-ui'\n  //divers\n  import TemperatureChartGlobal from \"../../../components/TemperatureChartGlobal\";\n  import MapSensor from \"@/components/MapSensor\";\n  import Meteo from \"@/components/Meteo\";\n  import axios from \"axios\"\n  import WebcamCard from \"@/components/WebcamCard\";\n  //QUERY\n  const field_groundTemperature = 'payload_fields_temperature_target_value'\n  export default {\n    components: {\n      WebcamCard,\n      Meteo,\n      MapSensor,\n      [Table.name]: Table,\n      [TableColumn.name]: TableColumn,\n      TemperatureChartGlobal,\n\n    },\n    data() {\n      return {\n        centerMapAyent : [46.283, 7.40],\n        centerMapStleo : [46.249, 7.426],\n        meteoSrcAyent : 'https://meteo.search.ch/widget/Anzère.fr.html',\n        meteoSrcStleo : 'https://meteo.search.ch/widget/St-léonard',\n\n        sensors: [],                                                           //contain all sensors\n        sensorListJson : [],\n\n        series_chart: [{                                                        //serie of the 3 sensors, used just in this page\n          data: [],\n        }],\n        window: {                                                             //Windows size, used for meteo widget\n          width: 0,\n          height: 0,\n        },\n        cam : {\n          url :\"\",\n          location:\"\"\n        }\n      }\n    },\n    computed :{\n      sortedSensors : function(){\n        return this.sensors.sort((a,b) => (a.realName > b.realName) ? 1 : ((b.realName > a.realName) ? -1 : 0)) //sorted by alphabetic order\n\n\n      }\n    },\n\n    created() {\n      //this.$PROJECT = location.hostname.split('.')[0]\n      //listener for window size\n      window.addEventListener('resize', this.handleResize, {passive: true});\n      this.handleResize();\n    },\n\n\n    mounted() {\n      let s = []\n      let color = []\n\n      axios.get(this.$SERVERURL +'sensorList') //http://localhost:4500/sensorList\n        .then(res => {\n          this.sensorListJson.push(res.data);\n          for (var i = 0; i < this.sensorListJson[0].length; i++) {\n            if (this.sensorListJson[0][i].project === this.$PROJECT) {\n\n              this.$globalLoadData(this.sensorListJson[0][i].type, this.sensorListJson[0][i].location)\n               this.sensors = this.$globalSensors.sort((a,b) => (a.location > b.location) ? 1 : ((b.location > a.location) ? -1 : 0))\n\n              if (this.sensorListJson[0][i].type === 'decentlab') {\n                color.push(this.sensorListJson[0][i].color)\n                var colorIndex = 0;\n                //console.log(color)\n                this.$loadSerie('decentlab', this.sensorListJson[0][i].location, field_groundTemperature, this.sensorListJson[0][i].realName, \"30m\", \"24h\").then(\n                  result => {\n                    result[0].color = color[colorIndex];\n                    colorIndex++\n                    s.push(result[0]);\n                  }\n                )\n              } else if (this.sensorListJson[0][i].type === 'gateway') {\n                //console.log(this.sensorListJson[0][i])\n                this.$GATEWAYLISTJSON.push(this.sensorListJson[0][i])\n              }else if(this.sensorListJson[0][i].type ==='cam'){\n                //console.log(this.sensorListJson[0][i].url)\n                this.cam.url = this.sensorListJson[0][i].url\n                this.cam.location=this.sensorListJson[0][i].realName\n\n              }\n            }\n          }\n          this.$SENSORSLISTJSON.push(this.sensorListJson[0])\n          this.series_chart = s\n        }).catch(error => {\n          console.log(error)\n          // Manage errors if found any\n        })\n\n      axios.get(this.$SERVERURL+'collaboratorList') //http://localhost:4500/sensorList\n        .then(res => {\n         // console.log(res.data)\n        })\n        .catch(error => {\n          console.log(error)\n          // Manage errors if found any\n        })\n    },\n\n    destroyed() {\n      window.removeEventListener('resize', this.handleResize);\n    },\n\n    methods: {\n      //----------------------------------WINDOW PART --------------------------------------------------------------------\n      /**\n       * function to get the window size\n       */\n      handleResize: function () {\n        this.window.width = window.innerWidth;\n        this.window.height = window.innerHeight;\n      },\n\n    },\n  }\n</script>\n\n<style>\n  .lightText {\n    color: darkgrey;\n  }\n</style>\n"]}]}