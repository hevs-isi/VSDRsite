{"remainingRequest":"/home/amos/Bureau/VSDR_site/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/amos/Bureau/VSDR_site/src/components/TemperatureChartGlobal.vue?vue&type=style&index=0&id=0448c2bd&scoped=true&lang=css&","dependencies":[{"path":"/home/amos/Bureau/VSDR_site/src/components/TemperatureChartGlobal.vue","mtime":1617204143000},{"path":"/home/amos/Bureau/VSDR_site/node_modules/css-loader/dist/cjs.js","mtime":1622616466311},{"path":"/home/amos/Bureau/VSDR_site/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1622616466449},{"path":"/home/amos/Bureau/VSDR_site/node_modules/postcss-loader/src/index.js","mtime":1622616466430},{"path":"/home/amos/Bureau/VSDR_site/node_modules/cache-loader/dist/cjs.js","mtime":1622616452493},{"path":"/home/amos/Bureau/VSDR_site/node_modules/vue-loader/lib/index.js","mtime":1622616466449}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgouc3RvY2sgewogIHdpZHRoOiBhdmFpbGFibGU7Cn0K"},{"version":3,"sources":["TemperatureChartGlobal.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0NA;AACA;AACA","file":"TemperatureChartGlobal.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <highcharts class=\"stock\" :constructor-type=\"'stockChart'\" :options=\"stockOptions\"\n              id=\"dataTemperatureGlobalChart\"></highcharts>\n</template>\n\n<script>\n  const alertTemperature = 1;\n\n  Date.prototype.morning = function(){\n    let newDate = new Date(this.getTime())\n    newDate.setHours(0+7)\n    newDate.setMinutes(0)\n    return newDate;\n  }\n\n  Date.prototype.evening = function(){\n    let newDate = new Date(this.getTime())\n    newDate.setHours(0+19)\n    newDate.setMinutes(0)\n    return newDate;\n  }\n\n  // Compute some important dates\n  let now = new Date()\n  let yesterday = new Date(now)\n  yesterday.setDate(yesterday.getDate() - 1)\n  let tomorrow = new Date(now)\n  tomorrow.setDate(tomorrow.getDate() + 1)\n\n\n  export default {\n    props: [\n      'dataTemperatureGlobalChart'\n    ],\n    data() {\n      this.$setRefTempChart()\n\n      return {\n        stockOptions: {\n          title: {\n            text: \"\"\n          },\n          time: {\n            timezoneOffset: -60, //-120\n\n          },\n\n          chart: {\n            style: {\n              fontFamily: 'Roboto',\n            },\n            height: 400,\n          },\n\n          boost: {\n            enabled: true\n          },\n\n          series: this.dataTemperatureGlobalChart,\n\n\n          // La barre au fond pour l'aperçu\n          navigator: {\n            enabled: false, handles: {\n              enable: false\n            }\n          },\n\n          // La barre de scroll\n          scrollbar: {\n            enabled: false\n          },\n\n          // Pour choisir les dates\n          rangeSelector: {\n            enabled: false\n          },\n\n          // scrollbar: {\n          //     barBackgroundColor: '#cccccc',\n          //     //barBorderRadius: 7,\n          //     //barBorderWidth: 0,\n          //     //buttonBackgroundColor: '#cccccc',\n          //     buttonBorderWidth: 0,\n          //     buttonBorderRadius: 7,\n          //     trackBackgroundColor: 'none',\n          //     trackBorderWidth: 1,\n          //     trackBorderRadius: 8,\n          //     trackBorderColor: '#CCC'\n          // },\n          //\n\n          // TODO This is not over, check with this https://stackoverflow.com/questions/47314448/filling-xaxis-for-all-nights-in-highcharts\n          xAxis: {\n           plotBands: [\n              {\n                color: 'ghostwhite', // Color value\n                from: yesterday.evening(),\n                to: now.morning(),\n                label: {\n                  text: '\\uD83C\\uDF19',\n                  style: {\n                    fontSize: '16px'\n                  },\n                  align: 'center',\n                  y: 25,\n                }\n              },\n              {\n                color: 'ghostwhite', // Color value\n                from: now.evening(),\n                to: tomorrow.morning(),\n                label: {\n                  text: '\\uD83C\\uDF19',\n                  style: {\n                    fontSize: '16px'\n                  },\n                  align: 'center',\n                  y: 25\n                }\n              },\n            ],\n          },\n\n          yAxis: [{ // Primary yAxis\n            title: {\n              style: {\n                color: '#4285f4'\n              },\n            }\n            ,\n\n            softMin : this.$refMinTempValue,\n            softMax : this.$refMaxTempValue,\n\n            // gridLineColor: '#000000',\n            // gridZIndex: 0,\n\n            labels: {\n              format: '{value} °C',\n            },\n\n            opposite: false,\n\n            plotLines: [{\n              value: alertTemperature,\n              color: 'palevioletred',\n              dashStyle: 'longdash',\n              width: 1.3,\n              label: {\n                text: 'Niveau alerte gel',\n                style: {\n                  color: 'gray'\n                }\n              }\n            }]\n\n          }, { // Secondary yAxis\n            title: {\n              // text: 'Pralan',\n              style: {\n                color: '#f4b400'\n              },\n            },\n            labels: {\n              format: '{value} °C',\n            },\n\n            opposite: true\n          }, { // third yAxis\n            title: {\n              // text: 'Pro de Savioz',\n              style: {\n                color: '#006600'\n              },\n            },\n            labels: {\n              format: '{value} °C',\n            },\n\n            opposite: true\n          }],\n\n          legend: {\n            enabled: true,\n            layout: 'horizontal',\n            align: 'center',\n            x: 0,\n            verticalAlign: 'top',\n            y: 0,\n            floating: true,\n          },\n\n          tooltip: {\n            enabled: true,\n //           xDateFormat: '%Y-%m-%d',\n            crosshairs: true,\n            shared: false,\n            split : false,\n            hideDelay : 50,\n            pointFormat: '{series.name}: <b>{point.y:.1f}°C</b>',\n          }\n\n        }\n      }\n    },\n\n    watch: {\n      dataTemperatureGlobalChart(newValue) {\n        this.stockOptions.series = newValue\n       // console.log(this.minValue)\n       // console.log(this.maxValue)\n      },\n    }\n  }\n</script>\n\n<style scoped>\n  .stock {\n    width: available;\n  }\n</style>\n"]}]}